<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
          [['title','content'], 'required'],
          [['title','description','content'], 'string'],
          [['title'], 'string', 'max' => 255],
          [['date'], 'date', 'format'=>'php:Y-m-d'],
          [['date'], 'default', 'value' => date('Y-m-d')],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    // метод сохранения картинки
    public function saveImage($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }

    // метод вывода картинки
    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/no-image.png';
    }

    // метод удаления картинки
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    // метод, который выполняется послу удаления картинки
    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getCategory()
    {
        // связь с моделью категории, статья имеет одну категорию
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    // метод сохранения категории
    public function saveCategory($category_id)
    {
        // извлечение категории из базы
        $category = Category::findOne($category_id);
        // если катеория не нуль, то
        if($category != null)
        {
            // передаем в метод link название связи 'category' и модель $category,
            // с которой хотим связаться
            $this->link('category', $category);
            return true;
            // связь link не возвращает true, поэтому возвращаем true сами
        }
    }

    // запись id автора статьи в базу
    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->id;
        return $this->save(false);
    }

    // метод связи с моделью комментариев
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }

    public function getArticleComments()
    {
        return $this->getComments()->where(['status'=>1])->all();
    }

    // форматирование даты
    public function formatDate()
    {
        return Yii::$app->formatter->asDate($this->date, 'php:d.m.Y');
    }

    // инкремент количетсва просмотров статей
    public function increment()
    {
      $incr = ($this->viewed) + 1;
      $this->viewed = $incr;
      $this->save();
    }
}
